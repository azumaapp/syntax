[Vuex - router]

1. API 확인 : https://api.hnpwa.com/v0/item/30329752.json
    상단 주소의 30329752는 news의 id를 의미한다.

### 1. src/views/NewsView.vue 수정 ### : 뉴스의 상세페이지로 가는 링크를 타이틀에 걸기

<template>
  <div>
    뉴스 페이지<br>
    <input
      type="text"
      v-model="id"
      placeholder="id"
    /><br>
    <input
      type="text"
      v-model="title"
      placeholder="title"
    /><br><br>
    <button @click="add">추가</button>
    <ul v-if="news.length > 0">
      <li
        v-for="item in news"
        :key="item.id"
      >
        <!-- API 주소 예시 : https://api.hnpwa.com/v0/item/30329752.json -->
        <router-link :to="`item/${item.id}`">{{ item.title }}</router-link>
      </li>
    </ul>
    <div
      v-else
      class="red"
    >Loading...</div>
  </div>
</template>

<script>
export default {
  data () {
    return {
      id: null,
      title: null,
    }
  },
  computed: {
    news () {
      return this.$store.state.news
    }
  },
  created () {
    this.$store.dispatch('FETCH_NEWS')
  },
  methods: {
    add () {
      const data = {
        id: this.id,
        title: this.title,
      }
      this.$store.commit('ADD_NEWS', data)
    }
  }
}
</script>

<style scope>
.red {
  color: red;
  font-size: 200px;
}
</style>



### 1. src/routes/index.js 수정 ### : 임포트, 루터 추가

import ItemView from "../views/ItemView.vue"

,
        {
            path: '/item/:id',
            component: ItemView
        }



### 1. [Create ~ Dispatch] src/views/ItemView.vue 생성 ###

<template>
  <div>
    ItemView 페이지 <br>
    {{ this.$route.params.id }}
  </div>
</template>

<script>
export default {
  created () {
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



### 1. [Action ~ Commit] actions.js 수정 ###

import axios from "axios"

export default {
    FETCH_NEWS ({ commit }) {
        axios.get('https://api.hnpwa.com/v0/news/1.json')
            .then((response) => {
                console.log(response.data)
                commit('SET_NEWS', response.data)
            })
    },
    FETCH_ASK ({ commit }) {
        axios.get('https://api.hnpwa.com/v0/ask/1.json')
            .then((response) => {
                console.log(response.data)
                commit('SET_ASK', response.data)
            })
    },
    FETCH_NEWS_DETAIL ({ commit }, id) {
        axios.get(`https://api.hnpwa.com/v0/item/${id}.json`)
            .then((response) => {
                console.log(response.data)
                commit('SET_FETCH_NEWS', response.data)
            })
    },
}



### 1. [Mutation] mutations.js 수정 ### : SET_NEWS_DETAIL 메소드 추가

export default {
    SET_NEWS (state, news) {
        state.news = news
    },
    SET_ASK (state, ask) {
        state.ask = ask
    },
    DELETE_ASK (state, id) {
        const index = state.ask.findIndex(v => v.id === id)
        console.log('Target Index: ', index)
        state.ask.splice(index, 1) // splice(index, 1) : index로부터 1개를 지운다.
    },
    ADD_NEWS (state, payload) { // payload 라는 이름을 주로 사용한다.
        state.news.push(payload) // 뒤에 추가된다.
        // state.news.unshift(payload) // 앞에 추가된다.
    },
    UPDATE_ASK (state, payload) {
        const index = state.ask.findIndex(v => v.id === payload.id)
        state.ask[index].user = payload.user
    },
    SET_NEWS_DETAIL (state, payload) {
        state.newsDetail = payload
    }
}



### 1. [Store] src/store/index.js 수정 ### : newsDetail 추가

import Vue from 'vue'
import Vuex from 'vuex'
import actions from './actions.js'
import mutations from './mutations.js'

Vue.use(Vuex)

export default new Vuex.Store({
    state: {
        news: [],
        ask: [],
        newsDetail: null
    },
    actions,
    mutations
})



### 1. [Store] src/views/ItemView.vue 수정 ### : 스토어를 거쳐서 화면에 정보를 전달하도록 수정

<template>
  <div>
    ItemView 페이지 <br>
    <div v-if="!newsDetailResult">Loading...</div>
    <div v-else>
      {{ newsDetailResult }}
    </div>
  </div>
</template>

<script>
export default {
  computed: {
    newsDetailResult () {
      return this.$store.state.newsDetail
    }
  },
  created () {
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



### 1. [화면] src/views/ItemView.vue 수정 ### : 화면에 표시될 정보 가공 (1차)

<template>
  <div>
    ItemView 페이지 <br>
    <div v-if="!newsDetailResult">Loading...</div>
    <div v-else>
      {{ newsDetailResult.id }}<br>
      {{ newsDetailResult.points }}<br>
      {{ newsDetailResult.content }}
      <ul>
        <li
          v-for="item in newsDetailResult.comments"
          :key="item.id"
        >
          {{ item.id }}
          {{ item.content }}
        </li>
      </ul>
    </div>
  </div>
</template>

<script>
export default {
  computed: {
    newsDetailResult () {
      console.log('this.$store.state.newsDetail: ', this.$store.state.newsDetail)
      return this.$store.state.newsDetail
    }
  },
  created () {
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



### 1. [화면] src/views/ItemView.vue 수정 ### : 화면에 표시될 정보 가공 (2차)

<template>
  <div>
    ItemView 페이지 <br>
    <div v-if="!newsDetailResult">Loading...</div>
    <div v-else>
      번호 {{ newsDetailResult.id }} /
      평점 {{ newsDetailResult.points }}점<br>
      <b>{{ newsDetailResult.title }}</b>
      <span v-html="`${newsDetailResult.content}`" />
      <ul>
        <li
          v-for="item in newsDetailResult.comments"
          :key="item.id"
        >
          ID: {{ item.user }}
          <span v-html="`${item.content}`" />
        </li>
      </ul>
    </div>
  </div>
</template>

<script>
export default {
  computed: {
    newsDetailResult () {
      console.log('this.$store.state.newsDetail: ', this.$store.state.newsDetail)
      return this.$store.state.newsDetail
    }
  },
  created () {
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



1. 최종 테스트
  npm run serve

1. 끝