- Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어.

- Git : 버전 관리 시스템
    - 프로젝트를 진행하면서 소스 코드를 USB나 메일로 주고받는 건 엄청난 낭비 임과 동시에 보안성 위험이 있다.
    그렇기 때문에 프로젝트를 진행 함에 있어 형상 관리 도구를 사용 한다. 
    - 형상 관리 도구를 사용하면 변경을 쉽게 되돌릴 수 있다. 소스코드를 과거의 특정 시점으로 되돌리거나, 특정 시점의 변경 사항을 취소하거나, 두 버전의 소스 코드를 비교하는 등의 일이 가능하다.

- Github : 버전 관리 웹호스팅 서비스
    - 협업하고 있는 코드를 저장할 서버가 필요하다.
    - 버전 관리 시스템을 지원하는 웹호스팅 서비스의 기능을 통해, push, pull request같은 이벤트에 반응하여 자동으로 작업(배포 등)을 실행하게 할 수 있다.

- 설치 방법 : git mac download 검색하면 아래의 방법이 나옴
1. vscode에서 Terminal -> 새로운 터미널 열기 -> brew install mac 검색 후 sudo 명령어로 brew 설치
    * brew : Package 관리 시스템
1. brew install git

- 연동할 코드를 준비해 둠 : 꼭 vue-cli로 안해도 됨. 그냥 txt 파일로 해도 됨.
1. 사전에 node가 설치되어 있지 않은 경우 node 설치
1. 원하는 위치에 소스코드 workspace 폴더를 생성
1. 터미널(powershell이 아닌 git bash 터미널로 할 것)에 들어감
1. npm install -g @vue/cli @vue/cli-service-global 로 뷰 클리 설치
1. $vue create test
1. default로 설치
1. 연동 준비가 완료됨

- SSH Key를 설정 : git ssh key email 검색하면 아래의 방법이 나옴
1. $ ssh-keygen -t rsa -b 4096 -C "ydhvocal@gmail.com"
1. 뭔가 입력하는 부분이 3번 정도 나오는데 그냥 enter 3번 입력
1. ssh 키 생성이 완료됨
1. $ cd ~/.ssh
1. $ ls
1. 파일명.pub를 복사
1. cat 파일명.pub
1. 터미널에 나온 값을 복사
1. github로 이동
1. github.com에 들어간다. -> sign in -> new repo -> 새로운 저장소 test 생성
1. 깃허브 우측 상단 메뉴를 누른뒤, settings에 들어간다.
1. 왼쪽 사이드메뉴에서 SSH and GPG Keys를 클릭한다.
1. 설정화면 우상단에 있는 초록색 New SSH Key 버튼을 클릭한다.
1. Key 부분에 복사한 SSH Key 값을 집어넣는다.
1. Title 부분에는 뭐든 상관없지만, 일단 파일명.pub으로 해두면 된다.
1. 생성했던 github의 레포지토리로 간다.

- 깃 푸시 : 깃 레포에 나와있는 설명대로 터미널에 입력하여 푸시하면 된다.
1. 터미널에서 ls, cd grammar 명령어등을 사용해서 해당 소스코드 폴더로 이동
1. 프로젝트 폴더내에 .git 폴더 생성
    git init (소스 안에 git 명령어를 사용할 수 있게 설치)
1. 깃허브에서 해당 git 주소를 ssh 주소로 복사 -> git@github.com:azumaapp/test.git
1. 소스를 클론    
    git clone git@github.com:azumaapp/test.git 또는
    git remote add origin git@github.com:azumaapp/test.git
1. 소스를 깃 레포지토리에 업로드
    git add . (스테이징 환경에 모든 소스코드를 올린다.)
    git commit -m "first commit" (커밋 = 스테이징에 있는 코드들을 커밋명을 붙여서 푸시 전단계로 올린다.)
    git push -u origin master (업로드)
    git remote -v (확인)
1. 깃허브에서 푸시 올라갔는지 확인

- .gitignore 확인 및 등록 : 깃허브에 푸시하고 싶지 않은 것들을 넣으면 됨
1. .gitignore 파일을 열기
1. 대표적으로 무거워서 넣지 않는 것중에 node_modules 폴더가 있는데 있는지 확인 (기본값)

1. 이메일 설정 : 최초의 경우, git 유저 정보 터미널에 입력
        git config --global list
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"

1. 반복할 것은 이것 뿐! (vscode에서 3번째 깃 익스플로러 에서 작업 가능!)
    소스를 업데이트한다.
    git add . (스테이징 환경에 모든 소스코드를 올린다.)
    git commit -m "first commit" (커밋 = 스테이징에 있는 코드들을 커밋명을 붙여서 푸시 전단계로 올린다.)
    git push -u origin master (업로드)

- 추가학습 : 관련 용어들
1. Repository : 깃 저장소
1. Staging Area : 저장소에 커밋하기 전에 커밋을 준비하는 위치.
1. Commit : 현재 변경된 작업 상태를 점검을 마치면 확정하고 저장소에 저장하는 작업.
1. Branch : 가지 또는 분기점을 의미하며, 작업을 할때에 현재 상태를 복사하여 Branch에서 작업을 한 후에 완전하다 싶을때 Merge를 하여 작업을 한다.
1. Merge : 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미한다.
