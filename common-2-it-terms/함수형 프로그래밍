[함수형 프로그래밍]

1. 비함수형 공장과 함수형 공장의 예시
초콜릿 공장 A : 비함수형 공장
    공장장 : 프로세스 배정
    로스팅 담당 : 카카오 볶기, 남은 시간 표시해서 분쇄
    분쇄 담당 : 시간을 확인하고 로스팅된 카카오를 분쇄기에 돌려서 진득한 카카오매스로 만듦
    제조사 : 분쇄가 끝내면 당일 요구사항을 확인한 뒤 각 종류 초콜릿을 만들어 냄
    포장 담당 : 포장해서 공장장에게 완수를 보고함

- 초콜릿 공장 B : 함수형 공장
    컨베이어벨트에 재료를 올려놓고,
    로스팅 담당 : 들어오는대로 로스팅
    분쇄 담당 : 들어오는대로 분쇄
    제조사 : 들어오는대로 제조
    포장 담당 : 들어오는대로 코팅



1. 함수형 공장의 특징
- 인풋과 아웃풋이 있음
- 외부환경으로부터 철저히 독립적임
- 같은 인풋이면 언제나 동일한 아웃풋을 도출 (=순수함수)
- 다른 담당의 변수값 변경을 원천 봉쇄하여, 엇갈림 오류를 방지한다


1. 함수형 프로그래밍의 특징
- 선언형이다. : 
    "너는 ~해라." 는 명령형이다.
    "너는 ~이다." 라는 선언은 함수형이다.
    마치 값인 것처럼 함수는 다룬다.
    자바스크립트에서.
    function multi(given) { console.log(given * 2); } 를,
    const multi = function (given) { console.log(given * 2); } 이나,
    const multi = (given) => console.log(given * 2); 
    식으로 표현된 걸 본적 있을 것이다.
    이것은 return multi(3); 이렇게 썼을 때 6이라는 "확실하게 예측가능한 값"을 도출해낸다 하여
    함수가 마치 "값"처럼 사용이 되고, 값으로 선언된 것처럼 사용하는 방식이다.
    이는 상단에 소개한 "함수형 공장의 특징"과 일맥상통한다.



1. 함수형 프로그래밍의 용도
- 고계함수
    그런데, 함수를 값으로 보면서 대체 뭘하려는 걸까?
    함수를 값으로 본다면, 함수도 다른 함수에 인자로 넣을 수 있게 되는 것이고,
    그것을 바로 고계함수라 부른다.
- 커링
    여러 인자를 받는 함수에 일부 인자만 넣어서,
    나머지 인자를 받는 다른 함수를 만들어낼 수 있는 커링 프로그래밍 기법을 가능하게 한다.
- 함수 컴비네이터
    함수 컴비네이터를 사용하면, 배열을 for문으로 안돌려도 됨. for문의 각종 부작용 예방가능
    println(
        students
            .filter(i => i.division == "이과")
            .take(3)
            .map(i => s"${i.name}(${i.major})")
            .foldLeft("")((i, j)) => i + " " + j)
    )
