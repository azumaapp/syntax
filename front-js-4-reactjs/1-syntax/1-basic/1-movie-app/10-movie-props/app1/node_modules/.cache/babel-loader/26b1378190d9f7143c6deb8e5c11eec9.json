{"ast":null,"code":"var _jsxFileName = \"/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-spa-csr/1-syntax/1-basic/4-useEffect/app1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // 초기값 설정\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n  useEffect(() => {\n    console.log('count1: ', count1);\n    console.log('count2: ', count2);\n  }, [count1, count2]);\n  useEffect(() => {\n    console.log('최초 렌더링 때만 실행');\n  }, []); // state를 []로 비워두면, 최초 렌더링 때만 실행된다.\n\n  const addCount1 = () => {\n    setCount1(count1 + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"useEffect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount1,\n      children: \"Click1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount2(count2 + 1),\n      children: \"Click2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PMvEEVyqw2YOU3bwDCikbDC58xs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","App","count1","setCount1","count2","setCount2","console","log","addCount1"],"sources":["/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-spa-csr/1-syntax/1-basic/4-useEffect/app1/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nfunction App() {\n  // 초기값 설정\n  const [count1, setCount1] = useState(0)\n  const [count2, setCount2] = useState(0)\n\n  useEffect(() => {\n    console.log('count1: ', count1)\n    console.log('count2: ', count2)\n  }, [count1, count2])\n\n  useEffect(() => {\n    console.log('최초 렌더링 때만 실행')\n  }, []) // state를 []로 비워두면, 최초 렌더링 때만 실행된다.\n  \n  const addCount1 = () => {\n    setCount1(count1 + 1)\n  }\n\n  return (\n    <div className='App'>\n      <h1>useEffect</h1>\n      {/* useEffect 훅으로 처리하는 것은, \n        이벤트에 사전에 만든 함수를 넣거나, \n        직접 만들어 넣는 경우 두가지로 구현가능하다. */}\n      <button onClick={addCount1}>Click1</button> \n      <button onClick={() => setCount2(count2 + 1)}>Click2</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,CAAD,CAApC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAApC;EAEAC,SAAS,CAAC,MAAM;IACdM,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,MAAxB;IACAI,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,MAAxB;EACD,CAHQ,EAGN,CAACF,MAAD,EAASE,MAAT,CAHM,CAAT;EAKAJ,SAAS,CAAC,MAAM;IACdM,OAAO,CAACC,GAAR,CAAY,cAAZ;EACD,CAFQ,EAEN,EAFM,CAAT,CAVa,CAYN;;EAEP,MAAMC,SAAS,GAAG,MAAM;IACtBL,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAKE;MAAQ,OAAO,EAAEM,SAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eAME;MAAQ,OAAO,EAAE,MAAMH,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GA5BQH,G;;KAAAA,G;AA8BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}