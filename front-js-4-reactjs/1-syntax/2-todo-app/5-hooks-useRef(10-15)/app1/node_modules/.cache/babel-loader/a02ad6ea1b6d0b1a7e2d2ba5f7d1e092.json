{"ast":null,"code":"import _defineProperty from \"/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-syntax/2-todo-app/4-grammar-useState1/app1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-syntax/2-todo-app/4-grammar-useState1/app1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-syntax/2-todo-app/4-grammar-useState1/app1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-syntax/2-todo-app/4-grammar-useState1/app1/src/InputSample.js\";\nimport React, { useState } from 'react';\n\nfunction InputSample() {\n  var _useState = useState({\n    name: '',\n    nickname: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var name = inputs.name,\n      nickname = inputs.nickname; // 비구조화 할당을 통해 값 추출\n\n  var onChange = function onChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name; // 우선 e.target 에서 name 과 value 를 추출\n    // state에서 객체를 수정해야 할 때에는 inputs[name] = value 이런 식으로 직접 수정하면 안된다. \n    // 그 대신, 새로운 객체를 만들어서 새 객체에 변화를 주고, 이것으로 state를 갱신해야한다.\n\n    setInputs(_objectSpread({}, inputs, _defineProperty({}, name, value)));\n  };\n\n  var onReset = function onReset() {\n    setInputs({\n      name: '',\n      nickname: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"name\",\n    placeholder: \"\\uC774\\uB984\",\n    onChange: onChange,\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"nickname\",\n    placeholder: \"\\uB2C9\\uB124\\uC784\",\n    onChange: onChange,\n    value: nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"\\uCD08\\uAE30\\uD654\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uB984 : \", name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, \"\\uB2C9\\uB124\\uC784 : \", nickname)));\n}\n\nexport default InputSample;","map":{"version":3,"names":["React","useState","InputSample","name","nickname","inputs","setInputs","onChange","e","target","value","onReset"],"sources":["/Users/ishopjapan/Desktop/workspace/syntax/front-js-4-reactjs/1-syntax/2-todo-app/4-grammar-useState1/app1/src/InputSample.js"],"sourcesContent":["import React, { useState } from 'react'\n\nfunction InputSample() {\n    const [inputs, setInputs] = useState({\n        name: '',\n        nickname: ''\n    })\n\n    const { name, nickname } = inputs; // 비구조화 할당을 통해 값 추출\n\n    const onChange = (e) => {\n        const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출\n        // state에서 객체를 수정해야 할 때에는 inputs[name] = value 이런 식으로 직접 수정하면 안된다. \n        // 그 대신, 새로운 객체를 만들어서 새 객체에 변화를 주고, 이것으로 state를 갱신해야한다.\n        setInputs({\n        ...inputs, // 기존의 input 객체를 복사한 뒤\n        [name]: value // name 키를 가진 값을 value 로 설정\n        })\n    }\n\n    const onReset = () => {\n        setInputs({\n        name: '',\n        nickname: '',\n        })\n    }\n\n    return (\n        <div>\n            <input name=\"name\" placeholder=\"이름\" onChange={onChange} value={name} />\n            <input name=\"nickname\" placeholder=\"닉네임\" onChange={onChange} value={nickname}/>\n            <button onClick={onReset}>초기화</button>\n            <div>\n                <div>이름 : {name}</div>        \n                <div>닉네임 : {nickname}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default InputSample"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,WAAT,GAAuB;EAAA,gBACSD,QAAQ,CAAC;IACjCE,IAAI,EAAE,EAD2B;IAEjCC,QAAQ,EAAE;EAFuB,CAAD,CADjB;EAAA;EAAA,IACZC,MADY;EAAA,IACJC,SADI;;EAAA,IAMXH,IANW,GAMQE,MANR,CAMXF,IANW;EAAA,IAMLC,QANK,GAMQC,MANR,CAMLD,QANK,EAMgB;;EAEnC,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;IAAA,gBACIA,CAAC,CAACC,MADN;IAAA,IACZC,KADY,aACZA,KADY;IAAA,IACLP,IADK,aACLA,IADK,EACc;IAClC;IACA;;IACAG,SAAS,mBACND,MADM,sBAERF,IAFQ,EAEDO,KAFC,GAAT;EAIH,CARD;;EAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;IAClBL,SAAS,CAAC;MACVH,IAAI,EAAE,EADI;MAEVC,QAAQ,EAAE;IAFA,CAAD,CAAT;EAIH,CALD;;EAOA,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAO,IAAI,EAAC,MAAZ;IAAmB,WAAW,EAAC,cAA/B;IAAoC,QAAQ,EAAEG,QAA9C;IAAwD,KAAK,EAAEJ,IAA/D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,eAEI;IAAO,IAAI,EAAC,UAAZ;IAAuB,WAAW,EAAC,oBAAnC;IAAyC,QAAQ,EAAEI,QAAnD;IAA6D,KAAK,EAAEH,QAApE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAGI;IAAQ,OAAO,EAAEO,OAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAHJ,eAII;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAAWR,IAAX,CADJ,eAEI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,4BAAYC,QAAZ,CAFJ,CAJJ,CADJ;AAWH;;AAED,eAAeF,WAAf"},"metadata":{},"sourceType":"module"}